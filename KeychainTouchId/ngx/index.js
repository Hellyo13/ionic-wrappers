import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var KeychainTouchId = /** @class */ (function (_super) {
    __extends(KeychainTouchId, _super);
    function KeychainTouchId() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KeychainTouchId.prototype.isAvailable = function () { return cordova(this, "isAvailable", {}, arguments); };
    KeychainTouchId.prototype.save = function (key, password, userAuthenticationRequired) { return cordova(this, "save", {}, arguments); };
    KeychainTouchId.prototype.verify = function (key, message) { return cordova(this, "verify", {}, arguments); };
    KeychainTouchId.prototype.has = function (key) { return cordova(this, "has", {}, arguments); };
    KeychainTouchId.prototype.delete = function (key) { return cordova(this, "delete", {}, arguments); };
    KeychainTouchId.prototype.setLocale = function (locale) { return cordova(this, "setLocale", {}, arguments); };
    KeychainTouchId.pluginName = "KeychainTouchId";
    KeychainTouchId.plugin = "cordova-plugin-keychain-touch-id";
    KeychainTouchId.pluginRef = "plugins.touchid";
    KeychainTouchId.repo = "https://github.com/sjhoeksma/cordova-plugin-keychain-touch-id";
    KeychainTouchId.platforms = ["Android", "iOS"];
    KeychainTouchId.decorators = [
        { type: Injectable }
    ];
    return KeychainTouchId;
}(AwesomeCordovaNativePlugin));
export { KeychainTouchId };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbmd4L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sdUNBQStDLE1BQU0sK0JBQStCLENBQUM7O0lBZ0N2RCxtQ0FBMEI7Ozs7SUFNN0QscUNBQVc7SUFZWCw4QkFBSSxhQUFDLEdBQVcsRUFBRSxRQUFnQixFQUFFLDBCQUFtQztJQVl2RSxnQ0FBTSxhQUFDLEdBQVcsRUFBRSxPQUFlO0lBVW5DLDZCQUFHLGFBQUMsR0FBVztJQVVmLGdDQUFNLGFBQUMsR0FBVztJQVNsQixtQ0FBUyxhQUFDLE1BQWM7Ozs7Ozs7Z0JBNUR6QixVQUFVOzswQkFoQ1g7RUFpQ3FDLDBCQUEwQjtTQUFsRCxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBQbHVnaW4sIENvcmRvdmEsIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIEBuYW1lIEtleWNoYWluIFRvdWNoIElkXHJcbiAqIEBkZXNjcmlwdGlvblxyXG4gKiBBIGNvcmRvdmEgcGx1Z2luIGFkZGluZyB0aGUgaU9TIFRvdWNoSUQgLyBBbmRyb2lkIGZpbmdlcnByaW50IHRvIHlvdXJcclxuICogYXBwIGFuZCBhbGxvd2luZyB5b3UgdG8gc3RvcmUgYSBwYXNzd29yZCBzZWN1cmVseSBpbiB0aGUgZGV2aWNlIGtleWNoYWluLlxyXG4gKlxyXG4gKiBAdXNhZ2VcclxuICogYGBgdHlwZXNjcmlwdFxyXG4gKiBpbXBvcnQgeyBLZXljaGFpblRvdWNoSWQgfSBmcm9tICdAaW9uaWMtd3JhcHBlcnMva2V5Y2hhaW4tdG91Y2gtaWQvbmd4JztcclxuICpcclxuICpcclxuICogY29uc3RydWN0b3IocHJpdmF0ZSBrZXljaGFpblRvdWNoSWQ6IEtleWNoYWluVG91Y2hJZCkgeyB9XHJcbiAqXHJcbiAqIC4uLlxyXG4gKlxyXG4gKlxyXG4gKiB0aGlzLmtleWNoYWluVG91Y2hJZC5pc0F2YWlsYWJsZSgpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdLZXljaGFpblRvdWNoSWQnLFxyXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWtleWNoYWluLXRvdWNoLWlkJyxcclxuICBwbHVnaW5SZWY6ICdwbHVnaW5zLnRvdWNoaWQnLFxyXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vc2pob2Vrc21hL2NvcmRvdmEtcGx1Z2luLWtleWNoYWluLXRvdWNoLWlkJyxcclxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXSxcclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgS2V5Y2hhaW5Ub3VjaElkIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG4gIC8qKlxyXG4gICAqIENoZWNrIGlmIFRvdWNoIElEIC8gRmluZ2VycHJpbnQgaXMgc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2VcclxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGVyZSBpcyBoYXJkd2FyZSBzdXBwb3J0XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFbmNyeXB0cyBhbmQgU2F2ZXMgYSBwYXNzd29yZCB1bmRlciB0aGUga2V5IGluIHRoZSBkZXZpY2Uga2V5Y2hhaW4sIHdoaWNoIGNhbiBiZSByZXRyaWV2ZWQgYWZ0ZXJcclxuICAgKiBzdWNjZXNzZnVsIGF1dGhlbnRpY2F0aW9uIHVzaW5nIGZpbmdlcnByaW50XHJcbiAgICogQHBhcmFtIGtleSB7c3RyaW5nfSB0aGUga2V5IHlvdSB3YW50IHRvIHN0b3JlXHJcbiAgICogQHBhcmFtIHBhc3N3b3JkIHtzdHJpbmd9IHRoZSBwYXNzd29yZCB5b3Ugd2FudCB0byBlbmNyeXB0IGFuZCBzdG9yZVxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZXJlIGlzIGEgcmVzdWx0XHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHNhdmUoa2V5OiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIHVzZXJBdXRoZW50aWNhdGlvblJlcXVpcmVkOiBib29sZWFuKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE9wZW5zIHRoZSBmaW5nZXJwcmludCBkaWFsb2csIGZvciB0aGUgZ2l2ZW4ga2V5LCBzaG93aW5nIGFuIGFkZGl0aW9uYWwgbWVzc2FnZS4gUHJvbWlzZSB3aWxsIHJlc29sdmVcclxuICAgKiB3aXRoIHRoZSBwYXNzd29yZCBzdG9yZWQgaW4ga2V5Y2hhaW4gb3Igd2lsbCByZXNvbHZlIGFuIGVycm9yIGNvZGUsIHdoZXJlIC0xIGluZGljYXRlZCBub3QgYXZhaWxhYmxlLlxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gdGhlIGtleSB5b3Ugd2FudCB0byByZXRyaWV2ZSBmcm9tIGtleWNoYWluXHJcbiAgICogQHBhcmFtIG1lc3NhZ2Uge3N0cmluZ30gYSBtZXNzYWdlIHRvIHRoZSB1c2VyXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGtleSB2YWx1ZSBpcyBzdWNjZXNzZnVsbHkgcmV0cmlldmVkIG9yIGFuIGVycm9yXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIHZlcmlmeShrZXk6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrcyBpZiB0aGVyZSBpcyBhIHBhc3N3b3JkIHN0b3JlZCB3aXRoaW4gdGhlIGtleWNoYWluIGZvciB0aGUgZ2l2ZW4ga2V5LlxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gdGhlIGtleSB5b3Ugd2FudCB0byBjaGVjayBmcm9tIGtleWNoYWluXHJcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggc3VjY2VzcyBpZiB0aGUga2V5IGlzIGF2YWlsYWJsZSBvciBmYWlsdXJlIGlmIGtleSBpcyBub3QuXHJcbiAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGhhcyhrZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZWxldGVzIHRoZSBwYXNzd29yZCBzdG9yZWQgdW5kZXIgZ2l2ZW4ga2V5IGZyb20gdGhlIGtleWNoYWluLlxyXG4gICAqIEBwYXJhbSBrZXkge3N0cmluZ30gdGhlIGtleSB5b3Ugd2FudCB0byBkZWxldGUgZnJvbSBrZXljaGFpblxyXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHN1Y2Nlc3MgaWYgdGhlIGtleSBpcyBkZWxldGVkIG9yIGZhaWx1cmUgaWYga2V5IGlzIG5vdFxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZWxldGUoa2V5OiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgbGFuZ3VhZ2Ugb2YgdGhlIGZpbmdlcnByaW50IGRpYWxvZ1xyXG4gICAqIEBwYXJhbSBsb2NhbGUge3N0cmluZ30gbG9jYWxlIHN1YnRhZyBmcm9tIFt0aGlzIGxpc3RdKGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2xhbmd1YWdlLXN1YnRhZy1yZWdpc3RyeS9sYW5ndWFnZS1zdWJ0YWctcmVnaXN0cnkpLlxyXG4gICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzZXRMb2NhbGUobG9jYWxlOiBzdHJpbmcpOiB2b2lkIHt9XHJcbn0iXX0=